import logging
import re
from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command, StateFilter
from states.registration_states import RegistrationStates
from keyboards.main_kb import ButtonText, get_main_kb, get_profile_kb, get_cancel_kb
from database.users_db import db_manager

router = Router(name=__name__)


# –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –ë–î
def get_user(telegram_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    try:
        conn = db_manager.get_connection()
        cursor = conn.cursor()
        cursor.execute('SELECT * FROM users WHERE telegram_id = ?', (telegram_id,))
        user = cursor.fetchone()
        return user
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return None


def save_user_to_db(user_data):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î"""
    try:
        conn = db_manager.get_connection()
        cursor = conn.cursor()
        from datetime import datetime
        cursor.execute('''
            INSERT OR REPLACE INTO users 
            (telegram_id, username, full_name, birth_date, registration_date, last_updated)
            VALUES (?, ?, ?, ?, ?, ?)
        ''', (
            user_data['telegram_id'],
            user_data['username'],
            user_data['full_name'],
            user_data['birth_date'],
            user_data.get('registration_date', datetime.now().isoformat()),
            datetime.now().isoformat()
        ))
        conn.commit()
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_data['telegram_id']} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î")
        return True
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return False


# –¢–æ–ª—å–∫–æ –¥–ª—è –ª–∏—á–∫–∏
@router.message(Command("start"), F.chat.type == "private")
async def cmd_start_private(message: types.Message):
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞ –≤ –ª–∏—á–∫–µ")
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –±–æ—Ç–æ–º!\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å.",
        reply_markup=get_main_kb()
    )


# –¢–æ–ª—å–∫–æ –¥–ª—è –ª–∏—á–∫–∏
@router.message(F.text == ButtonText.PROFILE, F.chat.type == "private")
async def show_profile_private(message: types.Message):
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞–∂–∞–ª –ü—Ä–æ—Ñ–∏–ª—å –≤ –ª–∏—á–∫–µ")
    user = get_user(message.from_user.id)

    if user:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ –¥–∞–Ω–Ω—ã–µ
        profile_text = (
            "üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n"
            f"üÜî Telegram ID: {user[1]}\n"
            f"üë§ Username: @{user[2] or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"üìõ –ò–º—è: {user[3]}\n"
            f"üéÇ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {user[4]}\n"
            f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user[5][:10]}"
        )
        await message.answer(profile_text, reply_markup=get_main_kb())
    else:
        # –ï—Å–ª–∏ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
        await message.answer(
            "‚ùå –í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è:",
            reply_markup=get_profile_kb()
        )


# –¢–æ–ª—å–∫–æ –¥–ª—è –ª–∏—á–∫–∏
@router.message(F.text == "üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", F.chat.type == "private")
async def start_registration(message: types.Message, state: FSMContext):
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞—á–∞–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ –ª–∏—á–∫–µ")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ
    user = get_user(message.from_user.id)
    if user:
        await message.answer(
            "‚ùå –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!",
            reply_markup=get_main_kb()
        )
        return

    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∞–µ–º ID –∏ username
    user_info = (
        f"üÜî –í–∞—à Telegram ID: {message.from_user.id}\n"
        f"üë§ Username: @{message.from_user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:"
    )

    await message.answer(user_info, reply_markup=get_cancel_kb())
    await state.set_state(RegistrationStates.waiting_for_name)


# –¢–æ–ª—å–∫–æ –¥–ª—è –ª–∏—á–∫–∏
@router.message(F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", F.chat.type == "private")
async def go_back_to_main(message: types.Message):
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞–∂–∞–ª –ù–∞–∑–∞–¥")
    await message.answer(
        "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=get_main_kb()
    )


# –¢–æ–ª—å–∫–æ –¥–ª—è –ª–∏—á–∫–∏
@router.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∞", F.chat.type == "private")
async def cancel_registration(message: types.Message, state: FSMContext):
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—Ç–º–µ–Ω–∏–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")
    await state.clear()
    await message.answer(
        "‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
        reply_markup=get_main_kb()
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ - —Ç–æ–ª—å–∫–æ –¥–ª—è –ª–∏—á–∫–∏
@router.message(StateFilter(RegistrationStates.waiting_for_name), F.chat.type == "private")
async def process_name(message: types.Message, state: FSMContext):
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤–æ–¥–∏—Ç –∏–º—è: {message.text}")

    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await cancel_registration(message, state)
        return

    await state.update_data(name=message.text)
    await message.answer(
        "üéÇ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 25.12.1990):",
        reply_markup=get_cancel_kb()
    )
    await state.set_state(RegistrationStates.waiting_for_birthday)


@router.message(StateFilter(RegistrationStates.waiting_for_birthday), F.chat.type == "private")
async def process_birthday(message: types.Message, state: FSMContext):
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤–æ–¥–∏—Ç –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è: {message.text}")

    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await cancel_registration(message, state)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã
    if not re.match(r'^\d{2}\.\d{2}\.\d{4}$', message.text):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 25.12.1990):",
            reply_markup=get_cancel_kb()
        )
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –¥–∞—Ç—ã
    try:
        day, month, year = map(int, message.text.split('.'))
        if not (1 <= day <= 31 and 1 <= month <= 12 and 1900 <= year <= 2024):
            raise ValueError
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:",
            reply_markup=get_cancel_kb()
        )
        return

    await state.update_data(birthday=message.text)

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    user_data = await state.get_data()

    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    confirmation_text = (
        "üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n\n"
        f"üÜî Telegram ID: {message.from_user.id}\n"
        f"üë§ Username: @{message.from_user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"üìõ –ò–º—è: {user_data['name']}\n"
        f"üéÇ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {user_data['birthday']}\n\n"
        "–í—Å–µ –≤–µ—Ä–Ω–æ? –û—Ç–ø—Ä–∞–≤—å—Ç–µ '+' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ '-' –¥–ª—è –æ—Ç–º–µ–Ω—ã."
    )

    await message.answer(confirmation_text, reply_markup=get_cancel_kb())
    await state.set_state(RegistrationStates.waiting_for_confirmation)


@router.message(StateFilter(RegistrationStates.waiting_for_confirmation), F.chat.type == "private")
async def process_confirmation(message: types.Message, state: FSMContext):
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é: {message.text}")

    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await cancel_registration(message, state)
        return

    if message.text == '+':
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        user_data = await state.get_data()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        save_data = {
            'telegram_id': message.from_user.id,
            'username': message.from_user.username,
            'full_name': user_data['name'],
            'birth_date': user_data['birthday'],
        }

        if save_user_to_db(save_data):
            await message.answer(
                "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
                "–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!",
                reply_markup=get_main_kb()
            )
            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
        else:
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ–∑–∂–µ.",
                reply_markup=get_main_kb()
            )
    else:
        await message.answer(
            "‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            reply_markup=get_main_kb()
        )

    await state.clear()

@router.message(F.text == ButtonText.CLOSE, F.chat.type == "private")
async def close_keyboard_private(message: types.Message):
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–∫—Ä—ã–ª –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –ª–∏—á–∫–µ")
    await message.answer(
        "–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–∫—Ä—ã—Ç–∞. –ß—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é —Å–Ω–æ–≤–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start",
        reply_markup=types.ReplyKeyboardRemove()
    )