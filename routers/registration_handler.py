import logging
import re
from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command, StateFilter
from states.registration_states import RegistrationStates, EditProfileStates
from keyboards.main_kb import (
    ButtonText, get_main_kb, get_profile_kb, get_cancel_kb,
    get_user_profile_kb, get_confirm_edit_kb
)
from database.users_db import db_manager

router = Router(name=__name__)
logger = logging.getLogger(__name__)


# –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –ë–î —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
def get_user(telegram_id):
    try:
        conn = db_manager.get_connection()
        cursor = conn.cursor()
        cursor.execute('SELECT * FROM users WHERE telegram_id = ?', (telegram_id,))
        user = cursor.fetchone()
        logger.info(f"–ü–æ–ª—É—á–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id}: {'–Ω–∞–π–¥–µ–Ω' if user else '–Ω–µ –Ω–∞–π–¥–µ–Ω'}")
        return user
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {e}")
        return None


def save_user_to_db(user_data):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î"""
    try:
        conn = db_manager.get_connection()
        cursor = conn.cursor()
        from datetime import datetime

        current_time = datetime.now().isoformat()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        cursor.execute('SELECT registration_date FROM users WHERE telegram_id = ?',
                       (user_data['telegram_id'],))
        existing_user = cursor.fetchone()

        if existing_user:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            registration_date = existing_user[0]
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ last_updated
            cursor.execute('''
                           UPDATE users
                           SET username     = ?,
                               full_name    = ?,
                               birth_date   = ?,
                               last_updated = ?
                           WHERE telegram_id = ?
                           ''', (
                               user_data['username'],
                               user_data['full_name'],
                               user_data['birth_date'],
                               current_time,
                               user_data['telegram_id']
                           ))
        else:
            # –ï—Å–ª–∏ –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±–µ –¥–∞—Ç—ã
            cursor.execute('''
                           INSERT INTO users
                           (telegram_id, username, full_name, birth_date, registration_date, last_updated)
                           VALUES (?, ?, ?, ?, ?, ?)
                           ''', (
                               user_data['telegram_id'],
                               user_data['username'],
                               user_data['full_name'],
                               user_data['birth_date'],
                               current_time,
                               current_time
                           ))

        conn.commit()
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_data['telegram_id']} {'–æ–±–Ω–æ–≤–ª–µ–Ω' if existing_user else '—Å–æ—Ö—Ä–∞–Ω–µ–Ω'} –≤ –ë–î")
        return True
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_data['telegram_id']}: {e}")
        return False


@router.message(Command("start"), F.chat.type == "private")
async def cmd_start_private(message: types.Message):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞ –≤ –ª–∏—á–∫–µ")
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –±–æ—Ç–æ–º!\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å.",
        reply_markup=get_main_kb()
    )


@router.message(F.text == ButtonText.PROFILE, F.chat.type == "private")
async def show_profile_private(message: types.Message):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞–∂–∞–ª –ü—Ä–æ—Ñ–∏–ª—å –≤ –ª–∏—á–∫–µ")
    user = get_user(message.from_user.id)

    if user:
        # –ü–æ–ª—É—á–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
        message_count = db_manager.get_user_message_count(message.from_user.id)

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ –¥–∞–Ω–Ω—ã–µ —Å –∫–Ω–æ–ø–∫–æ–π –ò–∑–º–µ–Ω–∏—Ç—å
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ None –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—è
        telegram_id = user[1] if len(user) > 1 and user[1] else "–ù–µ —É–∫–∞–∑–∞–Ω"
        username = user[2] if len(user) > 2 and user[2] else "–Ω–µ —É–∫–∞–∑–∞–Ω"
        full_name = user[3] if len(user) > 3 and user[3] else "–ù–µ —É–∫–∞–∑–∞–Ω"
        birth_date = user[4] if len(user) > 4 and user[4] else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
        registration_date = user[5][:10] if len(user) > 5 and user[5] else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
        last_updated = user[6][:10] if len(user) > 6 and user[6] else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"

        profile_text = (
            "üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n"
            f"üÜî Telegram ID: {telegram_id}\n"
            f"üë§ Username: @{username}\n"
            f"üìõ –ò–º—è: {full_name}\n"
            f"üéÇ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {birth_date}\n"
            f"üìä –°–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–∞—Ö: {message_count}\n"
            f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {registration_date}\n"
            f"üîÑ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {last_updated}"
        )
        await message.answer(profile_text, reply_markup=get_user_profile_kb())
        logger.info(f"–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω (—Å–æ–æ–±—â–µ–Ω–∏–π: {message_count})")
    else:
        # –ï—Å–ª–∏ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
        await message.answer(
            "‚ùå –í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è:",
            reply_markup=get_profile_kb()
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç–∏—Ä–æ–≤–∞–Ω")


@router.message(F.text == ButtonText.EDIT_PROFILE, F.chat.type == "private")
async def start_edit_profile(message: types.Message, state: FSMContext):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞—á–∞–ª —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è")

    user = get_user(message.from_user.id)
    if not user:
        await message.answer(
            "‚ùå –í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n"
            "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.",
            reply_markup=get_main_kb()
        )
        return

    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    current_name = user[3] if user[3] else ""
    current_birthday = user[4] if user[4] else ""

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(
        current_name=current_name,
        current_birthday=current_birthday
    )

    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤–æ–µ –∏–º—è
    await message.answer(
        f"üìù –¢–µ–∫—É—â–µ–µ –∏–º—è: {current_name}\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ):",
        reply_markup=get_cancel_kb()
    )
    await state.set_state(EditProfileStates.waiting_for_name)


@router.message(F.text == ButtonText.CLOSE, F.chat.type == "private")
async def close_keyboard_private(message: types.Message):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–∫—Ä—ã–ª –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –ª–∏—á–∫–µ")
    await message.answer(
        "–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–∫—Ä—ã—Ç–∞. –ß—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é —Å–Ω–æ–≤–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start",
        reply_markup=types.ReplyKeyboardRemove()
    )


@router.message(F.text == ButtonText.BACK_TO_MAIN, F.chat.type == "private")
async def go_back_to_main(message: types.Message):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    await message.answer(
        "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=get_main_kb()
    )


@router.message(F.text == "üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", F.chat.type == "private")
async def start_registration(message: types.Message, state: FSMContext):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞—á–∞–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ –ª–∏—á–∫–µ")

    user = get_user(message.from_user.id)
    if user:
        await message.answer(
            "‚ùå –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å.",
            reply_markup=get_main_kb()
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç–∏—Ä–æ–≤–∞–Ω")
        return

    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∞–µ–º ID –∏ username
    user_info = (
        f"üÜî –í–∞—à Telegram ID: {message.from_user.id}\n"
        f"üë§ Username: @{message.from_user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:"
    )

    await message.answer(user_info, reply_markup=get_cancel_kb())
    await state.set_state(RegistrationStates.waiting_for_name)


@router.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∞", F.chat.type == "private")
async def cancel_operation(message: types.Message, state: FSMContext):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—Ç–º–µ–Ω–∏–ª –æ–ø–µ—Ä–∞—Ü–∏—é")
    await state.clear()
    await message.answer(
        "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
        reply_markup=get_main_kb()
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
@router.message(StateFilter(RegistrationStates.waiting_for_name), F.chat.type == "private")
async def process_name(message: types.Message, state: FSMContext):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤–æ–¥–∏—Ç –∏–º—è: {message.text}")

    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await cancel_operation(message, state)
        return

    await state.update_data(name=message.text)
    await message.answer(
        "üéÇ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 25.12.1990):",
        reply_markup=get_cancel_kb()
    )
    await state.set_state(RegistrationStates.waiting_for_birthday)


@router.message(StateFilter(RegistrationStates.waiting_for_birthday), F.chat.type == "private")
async def process_birthday(message: types.Message, state: FSMContext):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤–æ–¥–∏—Ç –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è: {message.text}")

    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await cancel_operation(message, state)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã
    if not re.match(r'^\d{2}\.\d{2}\.\d{4}$', message.text):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 25.12.1990):",
            reply_markup=get_cancel_kb()
        )
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –¥–∞—Ç—ã
    try:
        day, month, year = map(int, message.text.split('.'))
        if not (1 <= day <= 31 and 1 <= month <= 12 and 1900 <= year <= 2024):
            raise ValueError
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:",
            reply_markup=get_cancel_kb()
        )
        return

    await state.update_data(birthday=message.text)

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    user_data = await state.get_data()

    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    confirmation_text = (
        "üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n\n"
        f"üÜî Telegram ID: {message.from_user.id}\n"
        f"üë§ Username: @{message.from_user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"üìõ –ò–º—è: {user_data['name']}\n"
        f"üéÇ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {user_data['birthday']}\n\n"
        "–í—Å–µ –≤–µ—Ä–Ω–æ? –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∏–∂–µ:"
    )

    await message.answer(confirmation_text, reply_markup=get_confirm_edit_kb())
    await state.set_state(RegistrationStates.waiting_for_confirmation)


@router.message(StateFilter(RegistrationStates.waiting_for_confirmation), F.chat.type == "private")
async def process_registration_confirmation(message: types.Message, state: FSMContext):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é: {message.text}")

    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await cancel_operation(message, state)
        return

    if message.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å":
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        user_data = await state.get_data()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        save_data = {
            'telegram_id': message.from_user.id,
            'username': message.from_user.username,
            'full_name': user_data['name'],
            'birth_date': user_data['birthday'],
        }

        if save_user_to_db(save_data):
            await message.answer(
                "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
                "–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!",
                reply_markup=get_main_kb()
            )
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
        else:
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ–∑–∂–µ.",
                reply_markup=get_main_kb()
            )
    else:
        await message.answer(
            "‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            reply_markup=get_main_kb()
        )

    await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
@router.message(StateFilter(EditProfileStates.waiting_for_name), F.chat.type == "private")
async def process_edit_name(message: types.Message, state: FSMContext):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤–æ–¥–∏—Ç –Ω–æ–≤–æ–µ –∏–º—è: {message.text}")

    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await cancel_operation(message, state)
        return

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª "-", –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –∏–º—è
    if message.text == '-':
        user_data = await state.get_data()
        new_name = user_data.get('current_name', '')
    else:
        new_name = message.text

    await state.update_data(new_name=new_name)
    await message.answer(
        "üéÇ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 25.12.1990)\n"
        "–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â—É—é:",
        reply_markup=get_cancel_kb()
    )
    await state.set_state(EditProfileStates.waiting_for_birthday)


@router.message(StateFilter(EditProfileStates.waiting_for_birthday), F.chat.type == "private")
async def process_edit_birthday(message: types.Message, state: FSMContext):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤–æ–¥–∏—Ç –Ω–æ–≤—É—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è: {message.text}")

    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await cancel_operation(message, state)
        return

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª "-", –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è
    if message.text == '-':
        user_data = await state.get_data()
        new_birthday = user_data.get('current_birthday', '')
    else:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã
        if not re.match(r'^\d{2}\.\d{2}\.\d{4}$', message.text):
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 25.12.1990)\n"
                "–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â—É—é:",
                reply_markup=get_cancel_kb()
            )
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –¥–∞—Ç—ã
        try:
            day, month, year = map(int, message.text.split('.'))
            if not (1 <= day <= 31 and 1 <= month <= 12 and 1900 <= year <= 2024):
                raise ValueError
        except ValueError:
            await message.answer(
                "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n"
                "–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â—É—é:",
                reply_markup=get_cancel_kb()
            )
            return

        new_birthday = message.text

    await state.update_data(new_birthday=new_birthday)

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    user_data = await state.get_data()

    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    confirmation_text = (
        "üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:\n\n"
        f"üÜî Telegram ID: {message.from_user.id}\n"
        f"üë§ Username: @{message.from_user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"üìõ –ò–º—è: {user_data['new_name']}\n"
        f"üéÇ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {user_data['new_birthday']}\n\n"
        "–í—Å–µ –≤–µ—Ä–Ω–æ? –ù–∞–∂–º–∏—Ç–µ '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å' –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–ª–∏ '‚ùå –û—Ç–º–µ–Ω–∞' –¥–ª—è –æ—Ç–º–µ–Ω—ã."
    )

    await message.answer(confirmation_text, reply_markup=get_confirm_edit_kb())
    await state.set_state(EditProfileStates.waiting_for_confirmation)


@router.message(StateFilter(EditProfileStates.waiting_for_confirmation), F.chat.type == "private")
async def process_edit_confirmation(message: types.Message, state: FSMContext):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è: {message.text}")

    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await cancel_operation(message, state)
        return

    if message.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å":
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        user_data = await state.get_data()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        save_data = {
            'telegram_id': message.from_user.id,
            'username': message.from_user.username,
            'full_name': user_data['new_name'],
            'birth_date': user_data['new_birthday'],
        }

        if save_user_to_db(save_data):
            await message.answer(
                "‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!",
                reply_markup=get_main_kb()
            )
            logger.info(f"–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω")
        else:
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_main_kb()
            )
    else:
        await message.answer(
            "‚ùå –ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã.",
            reply_markup=get_main_kb()
        )

    await state.clear()


